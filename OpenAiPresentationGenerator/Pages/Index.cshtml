@page
@model OpenAiQuickStartCSharp.Pages.IndexModel

<!DOCTYPE html>
<html>
<head>
    <title>My Page Title</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
</head>
<body>
<form id="presentationForm" class="input-form" method="post">
    <h1>📺</h1>
    <label for="my-input">Enter Presentation Theme</label>
    <input placeholder="Enter presentation theme" type="text" id="PresentationTheme" name="PresentationTheme"/>
    <label for="my-input">Enter slides count</label>
    <input placeholder="Enter slides count" type="text" id="SlidesCount" name="SlidesCount"/>
    <button type="submit">Generate presentation</button>
</form>
<div class="output-block">
    <span>Suggested Names:</span>
    <span id="suggestedNames"></span>
</div>
</body>

<script>
document.getElementById("presentationForm").addEventListener("submit", async function(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const jsonData = JSON.stringify(Object.fromEntries(formData.entries()));

    const response = await fetch("/OpenAi", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: jsonData
    });
    const reader = response.body.getReader();
    const stream = new ReadableStream({
        start(controller) {
            return pump();
            function pump() {
                return reader.read().then(({ done, value }) => {
                    if (done) {
                        controller.close();
                        return;
                    }
                    controller.enqueue(value);
                    return pump();
                });
            }
        }
    });
    const blob = new Blob([await streamToArray(stream)]);
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'somefile.pptx';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
})

async function streamToArray(stream) {
    const chunks = [];
    const reader = stream.getReader();
    while (true) {
        const { done, value } = await reader.read();
        if (done) {
            break;
        }
        chunks.push(value);
    }
    return new Uint8Array(await new Blob(chunks).arrayBuffer());
}
</script>
</html>